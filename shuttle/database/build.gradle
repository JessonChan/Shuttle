apply plugin: 'shuttle.android.library'
apply plugin: 'com.squareup.sqldelight'

sqldelight {
    Database {
        packageName = "shuttle.database"
        schemaOutputDirectory = file("src/main/sqldelight/shuttle/database/schemas")
        verifyMigrations = true
    }
}

optIns {
    experimentalCoroutinesApi()
}

// modules
dependencies {
    implementation projects.shuttle.performance.api
    implementation projects.shuttle.utils.kotlin
    testImplementation projects.shuttle.test.kotlin
}

dependencies {
    implementation libs.bundles.base
    implementation libs.koin.android
    implementation libs.sqlDelight.android
    implementation libs.sqlDelight.coroutines

    testImplementation libs.mockk
    testImplementation libs.kotlin.test.junit
    testImplementation libs.sqlDelight.sqlite

    androidTestImplementation libs.bundles.test.android
}

tasks.withType(Test).configureEach {
    useJUnit()
}

tasks.register("updateDatabase") {
    dependsOn "generateReleaseDatabaseSchema"
    def migrationFolder = file("${projectDir}/src/main/sqldelight/shuttle/database/migrations")
    def schemaFolder = file("${projectDir}/src/main/sqldelight/shuttle/database/schemas")
    doLast {
        def threeMonthsAgo = new Date() - 90
        logger.warn("Deleting migrations older than ${threeMonthsAgo}")
        migrationFolder.listFiles().each { file ->
            def migrationFile = new File(migrationFolder, file.name)
            def lastModified = migrationFile.lastModified()
            if (lastModified != 0 && lastModified < threeMonthsAgo.time) {
                file.delete()
            }
        }
        schemaFolder.listFiles().each { file ->
            def schemaFile = new File(schemaFolder, file.name)
            def lastModified = schemaFile.lastModified()
            if (lastModified != 0 && lastModified < threeMonthsAgo.time) {
                file.delete()
            }
        }
    }
}
